type: edu
custom_name: stage5
files:
- name: src/search/Main.java
  visible: true
  text: |
    package search;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/SearchEngineTests.java
  visible: false
  text: |
    public class SearchEngineTests {
        public static final String NAMES =
            "Kristofer Galley\n" +
            "Fernando Marbury fernando_marbury@gmail.com\n" +
            "Kristyn Nix nix-kris@gmail.com\n" +
            "Regenia Enderle\n" +
            "Malena Gray\n" +
            "Colette Mattei\n" +
            "Wendolyn Mcphillips\n" +
            "Jim Gray\n" +
            "Coreen Beckham\n" +
            "Bob Yeh bobyeah@gmail.com\n" +
            "Shannan Bob stropeshah@gmail.com\n" +
            "Yer Fillion\n" +
            "Margene Resendez marres@gmail.com\n" +
            "Blossom Ambler\n" +
            "Teri Ledet teri_ledet@gmail.com\n" +
            "Dana Baron baron@gmail.com\n" +
            "Abram Goldsberry\n" +
            "Yer Leopold\n" +
            "Stefania Trunzo\n" +
            "Alexis Leopold\n" +
            "Carlene Bob\n" +
            "Oliver Dacruz\n" +
            "Jonie Richter\n" +
            "Pasquale Gallien gallien@evilcorp.com\n" +
            "Verdie Gentle\n" +
            "Gerardo Strouth gallien@evilcorp.com\n" +
            "Agripina Bob\n" +
            "Latricia Niebuhr\n" +
            "Malena Schommer\n" +
            "Drema Leopold\n" +
            "Heide Payeur\n" +
            "Ranae Digiovanni\n" +
            "Simona Pereira\n" +
            "Nick Digiovanni\n" +
            "Angelita Wigington gallien@evilcorp.com\n" +
            "Elin Gray\n" +
            "Dwain Trunzo\n" +
            "Boris Beiler\n" +
            "Remi Malek fsociefy@gmail.com\n" +
            "Demetria Hostetler gallien@evilcorp.com\n" +
            "Nydia Mcduffie\n" +
            "Florencio Defibaugh\n" +
            "Warner Giblin\n" +
            "Bob Mans\n" +
            "Shu Gray\n" +
            "Kaycee Gray\n" +
            "Victorina Froehlich victory@gmail.com\n" +
            "Roseanne Gray\n" +
            "Erica Radford hisam@gmail.com\n" +
            "Elyse Pauling";
    }
  learner_created: false
- name: test/SimpleSearchEngineTest.java
  visible: false
  text: |+
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.*;

    class TestClue {
        String input;

        TestClue(String input) {
            this.input = input;
        }
    }

    public class SimpleSearchEngineTest extends StageTest<TestClue> {

        public static final String test1 =
            "2\n" +
            "0";

        public static final String test2 =
            "1\n" +
            "qwerty\n" +
            "0";

        public static final String test3 =
            "1\n" +
            "Leopold\n" +
            "0";

        public static final String test4 =
            "3\n" +
            "1\n" +
            "Bob\n" +
            "2\n" +
            "2\n" +
            "1\n" +
            "Leopold\n" +
            "0";

        public static final String test5 =
            "1\n" +
            "@\n" +
            "1\n" +
            "Leopold\n" +
            "0";

        public static final String test6 =
            "0";

        public static final String test7 =
            "1\n" +
            "this text never find some match\n" +
            "0";

        public static final String test8 =
            "1\n" +
            "h\n" +
            "1\n" +
            "gallien@evilcorp.com\n" +
            "0";

        public static final String test9 =
            "4\n" +
            "2\n" +
            "2\n" +
            "1\n" +
            "this text never gonna be matched\n" +
            "1\n" +
            "h\n" +
            "1\n" +
            "gallien@evilcorp.com\n" +
            "0";

        @Override
        public List<TestCase<TestClue>> generate() {

            List<TestCase<TestClue>> tests = new ArrayList<>();

            for (String input : new String[]{
                test1, test2, test3, test4, test5, test6, test7, test8, test9}) {

                tests.add(new TestCase<TestClue>()
                    .setAttach(new TestClue(input))
                    .setInput(input)
                    .addArguments("--data", "names.txt")
                    .addFile("names.txt", SearchEngineTests.NAMES));
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String cR = "\n";
            List<String> outputLines = new LinkedList<String>(Arrays.asList(reply.split(cR)));
            String[] inputLines = clue.input.split(cR);
            String[] reference;
            String[] currentSearchResult;

            reference = SearchEngineTests.NAMES.split("\n");

            //clear the list of unnecessary lines, if any
            List<String> cleanedOutput = new ArrayList<String>();
            for (int i = 0; i < outputLines.size(); i++) {
                if (containsItemFromList(outputLines.get(i), reference)) {
                    cleanedOutput.add(outputLines.get(i).toLowerCase());
                }
            }

            int currentInputLine = 0;
            int currentOutputLine = 0;

            int actionType = -1;

            while (actionType != 0) {
                try {
                    actionType = Integer.parseInt(inputLines[currentInputLine]);
                } catch (NumberFormatException e) {
                    return new CheckResult(false,
                        "The number of menu item must be number!");
                }

                switch (actionType) {
                    case 1:
                        currentInputLine++;

                        String toSearch = inputLines[currentInputLine].trim().toLowerCase();

                        currentInputLine++;

                        List<String> intendedResult = new ArrayList<>();

                        for (String s : reference) {
                            s = s.toLowerCase();
                            if (s.contains(" " + toSearch + " ")
                                || s.startsWith(toSearch + " ")
                                || s.endsWith(" " + toSearch)) {

                                intendedResult.add(s);
                            }
                        }



                        currentSearchResult = new String[intendedResult.size()];
                        for (int i = 0; i < intendedResult.size(); i++) {
                            try {
                                currentSearchResult[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutput = intendedResult.toArray(String[]::new);

                        Arrays.sort(correctOutput);
                        Arrays.sort(currentSearchResult);

                        if (!Arrays.equals(correctOutput, currentSearchResult)) {
                            return new CheckResult(false,
                                "Search result is not equal " +
                                    "to the expected search");
                        }
                        break;
                    case 2:
                        currentInputLine++;

                        List<String> intendedResultAll = new ArrayList<>();

                        for (String s : reference) {
                            s = s.toLowerCase();
                            intendedResultAll.add(s);
                        }

                        String[] userResultAll = new String[intendedResultAll.size()];
                        for (int i = 0; i < intendedResultAll.size(); i++) {
                            try {
                                userResultAll[i] = cleanedOutput.get(currentOutputLine++);
                            } catch (IndexOutOfBoundsException e) {
                                return new CheckResult(false,
                                    "Seems like you output less than expected. " +
                                        "Either you've lost someone in the printing of all " +
                                        "people, or you haven't printed all the necessary " +
                                        "people in the search.");
                            }
                        }

                        String[] correctOutputAll = intendedResultAll.toArray(String[]::new);

                        Arrays.sort(correctOutputAll);
                        Arrays.sort(userResultAll);

                        if (!Arrays.equals(correctOutputAll, userResultAll)) {
                            return new CheckResult(false,
                                "Looks like you're printing " +
                                    "unknown people when you enter option 2.");
                        }
                        break;
                    case 0:
                        return CheckResult.correct();
                    default:
                        currentInputLine++;
                        break;
                }
            }

            return CheckResult.correct();
        }

        private static boolean containsItemFromList(String inputStr, String[] items) {
            return Arrays.stream(items).parallel().anyMatch(inputStr::contains);
        }
    }

  learner_created: false
- name: src/search/Display.java
  visible: true
  text: |
    package search;

    import java.util.List;

    public enum Display {
        ENTER_NUMBER_OF_PEOPLE("Enter the number of people:"),
        ENTER_ALL_PEOPLE("Enter all people:"),
        ENTER_NAME_OR_EMAIL("Enter a name or email to search all suitable people."),
        NO_MATCHES_FOUND("No matching people found."),
        INCORRECT_OPTION("Incorrect option! Try again."),
        MENU_HEADER("=== Menu ==="),
        LIST_OF_PEOPLE_HEADER("=== List of people ==="),
        BYE("Bye!"),
        SPACER("");

        private final String prompt;

        Display(String prompt) {
            this.prompt = prompt;
        }

        public static void display(Display item) {
            System.out.println(item.prompt);
        }

        public static void displayPeople(List<Person> people) {
            people.forEach(System.out::println);
        }

        public static void displayMenu() {
            System.out.print(Request.getMenu());
        }
    }
  learner_created: true
- name: src/search/Person.java
  visible: true
  text: |
    package search;

    public class Person {
        private final String firstName;
        private final String lastName;
        private final String email;

        public Person(String firstName, String lastName, String email) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
        }

        public static Person of(String[] data) {
            return data.length == 1 ? new Person(data[0], "", "")
                    : data.length == 2 ? new Person(data[0], data[1], "")
                    : new Person(data[0], data[1], data[2]);
        }

        @Override
        public String toString() {
            return String.format("%s %s %s", firstName, lastName, email).trim();
        }
    }
  learner_created: true
- name: src/search/Request.java
  visible: true
  text: |-
    package search;

    import java.util.Optional;

    public enum Request {
        INVALID_REQUEST(-1, null),
        FIND_A_PERSON(1, "Find a person"),
        PRINT_ALL_PEOPLE(2, "Print all people"),
        EXIT(0, "Exit");

        private final int identifier;
        private final String label;

        Request(int identifier, String label) {
            this.identifier = identifier;
            this.label = label;
        }

        public static String getMenu() {
            StringBuilder menu = new StringBuilder();

            for (Request r: Request.values()) {
                if (r != INVALID_REQUEST) {
                    menu.append(String.format("%d. %s%n", r.identifier, r.label));
                }
            }

            return menu.toString();
        }

        public static Request getRequest(int identifier) {
            for (Request r: Request.values()) {
                if (r.identifier == identifier) {
                    return r;
                }
            }

            return INVALID_REQUEST;
        }
    }
  learner_created: true
- name: src/search/PersonService.java
  visible: true
  text: "package search;\n\nimport java.util.*;\n\npublic class PersonService {\n\
    \    private final List<Person> repository;\n\n    public PersonService() {\n\
    \        this.repository = new ArrayList<>(); \n    }\n\n    public List<Person>\
    \ getRepository() {\n        return repository;\n    }\n\n    public void save(Person\
    \ p) {\n        repository.add(p);\n    }\n\n    public List<Person> findAll(String\
    \ query) {\n        List<Person> result = new ArrayList<>();\n\n        for (Person\
    \ p: repository) {\n            if (p.toString().toLowerCase().contains(query.toLowerCase()))\
    \ {\n                result.add(p);\n            }\n        }\n\n        return\
    \ result;\n    }\n}\n"
  learner_created: true
- name: src/search/Program.java
  visible: true
  text: |
    package search;

    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Paths;
    import java.util.List;
    import java.util.Scanner;

    import static search.Display.*;
    import static search.Request.EXIT;
    import static search.Request.getRequest;

    public class Program {
        private static final Scanner SCANNER = new Scanner(System.in);
        private final PersonService service = new PersonService();

        public Program(String path) throws IOException {
            String file = Files.readString(Paths.get(path));

            try (Scanner fileScanner = new Scanner(file)) {
                while (fileScanner.hasNextLine()) {
                    String[] data = fileScanner.nextLine().split(" ");
                    service.save(Person.of(data));
                }
            }
        }

        public void run() {
            Request request;

            do {
                display(MENU_HEADER);
                displayMenu();
                request = getRequest(getNumberResponse());
                display(SPACER);

                processRequest(request);

            } while (request != EXIT);

            display(BYE);
        }

        private int getNumberResponse() {
            int input = SCANNER.nextInt();
            SCANNER.nextLine();

            return input;
        }

        private String getStringResponse() {
            return SCANNER.nextLine();
        }

        private void processRequest(Request request) {
            switch (request) {
                case FIND_A_PERSON:
                    display(ENTER_NAME_OR_EMAIL);
                    String query = getStringResponse();
                    processQuery(query);
                    display(SPACER);
                    break;
                case PRINT_ALL_PEOPLE:
                    display(LIST_OF_PEOPLE_HEADER);
                    displayPeople(service.getRepository());
                    display(SPACER);
                    break;
                case INVALID_REQUEST:
                    display(INCORRECT_OPTION);
                    break;
            }
        }

        private void processQuery(String query) {
                List<Person> matches = service.findAll(query);

                if (matches.isEmpty()){
                    Display.display(NO_MATCHES_FOUND);
                } else {
                    displayPeople(matches);
                }
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/66/stages/358/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 29 Aug 2021 16:11:02 UTC
record: 5
